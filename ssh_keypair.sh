#!/bin/bash
#
# This simple script helps you create ssh key-pair with a server which you have
# account and access to. It will handle cases both when you have ssh previously
# initialized or not, either on client- or server-side.
#
# Usage:
# ssh_keypair.sh
#  -or-
# ssh_keypair.sh yourserver.domain server_account
#
# Simplest case scenario:
# =======================
# If you have initialized ssh on both sides before, all you will need to do when
# running the script is to enter your password 3-times (the script itself does not
# ask you for you password, it's the ssh client used by the script that asks you
# - i.e. your password will never be eavesdropped or compromised in any way).
#
# Worst case scenario:
# ====================
# If you haven't initialized ssh on either client or server side, this scrip will run
# the ssh init procedure for you. In such case, READ carefully what ssh is asking
# you to to. If it asks you for a pass-phrase, just press <enter>, if it asks you to
# answer “yes/no”, answer “yes” (you have to type in the answer, there's no default).
#
# Note that this script can be sourced, i.e. you can use it as a “script library” for
# your own higher abstraction scripting. i.e. you could add a nice GUI on top of it..
#
# Author: michael(-at-)ambrus.se 2010-01-23

if [ -z $SSH_KEYPAIR_SH ]; then

SSH_KEYPAIR_SH="ssh_keypair.sh"

# Creates a script that will go on the server-side
function create_srvscript() {
	echo "#! /bin/bash"									 	 >"$1"
	echo "set -e"											>>"$1"
	echo "TS=$2"											>>"$1"
	echo -n 'echo "Autogenerated script '					>>"$1"
	echo -n "$TS"											>>"$1"
	echo 'Please remove if not in use"'						>>"$1"
	echo "set -u"											>>"$1"
	echo 'echo; echo'										>>"$1"
	echo "if [ ! -d ~/.ssh ]; then"							>>"$1"
	echo '	echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"'	>>"$1"
	echo '	echo "Remote side [~/.ssh] directory missing."'	>>"$1"
	echo '	echo "Initializing..."'							>>"$1"
	echo '	echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"'	>>"$1"
	echo "	ssh-keygen -t dsa"								>>"$1"
	echo 'echo; echo'										>>"$1"
	echo "fi;"												>>"$1"
	echo 'echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"'	>>"$1"
	echo 'echo Adding transfered key id_dsa_${TS}.pub to authorized_keys2'	>>"$1"
	echo "cd ~/.ssh"										>>"$1"
	echo 'cat "/tmp/id_dsa_${TS}.pub" >> authorized_keys2'	>>"$1"
	echo "chmod 640 authorized_keys2"						>>"$1"
	echo 'echo; echo'										>>"$1"
	echo 'echo Removing temporary transferred key "/tmp/id_dsa_${TS}.pub"'	>>"$1"
	echo 'rm "/tmp/id_dsa_${TS}.pub"'										>>"$1"
	echo 'echo Removing this script "/tmp/ssh_server_$TS.sh"'				>>"$1"
	echo 'echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"'	>>"$1"
	echo 'rm "/tmp/ssh_server_$TS.sh"'						>>"$1"
	echo 'cd $OLDPWD'										>>"$1"
	chmod 0777 "$1"
}

# If necessary, Creates a local public key. Then transfers it to there
# the server side
function local_key_copy() {
	local USER="$1"
	local REMOTE="$2"
	local TS="$3"

	echo; echo
	if [ ! -d ~/.ssh ]; then
		echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
		echo "[~/.ssh] directory missing. Initializing..."
		echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
		ssh-keygen -t dsa
		echo; echo
	fi;
	if [ ! -f ~/.ssh/id_dsa.pub ]; then
		echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
		echo "Public keyfile [~/.ssh/id_dsa.pub] missing. Creating one..."
		echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
		ssh-keygen -t dsa -f ~/.ssh/id_dsa
		echo; echo
	fi;

	echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
	echo "Transfering your public key to the server using the following command:"
	echo "scp ~/.ssh/id_dsa.pub ${USER}@${REMOTE}:/tmp/id_dsa_${TS}.pub"
	echo "(You will need to enter password)"
	echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
	echo; echo
	scp ~/.ssh/id_dsa.pub ${USER}@${REMOTE}:/tmp/id_dsa_${TS}.pub
	echo; echo
}

# Wrapper to the script itself. I.e. you can use this function as it would be the script itself
# if you source it.
function ssh_keypair() {
	set -e

	local SRV_SCRIPT
	local REMOTE_SERVER="$1"
	local REMOTE_USER="$2"

	if [ -z "$TS" ]; then
		local TS=$(date "+%y%m%d_%H%M%S")
	fi

	SRV_SCRIPT=ssh_server_"$TS".sh
	if [ -z "$REMOTE_SERVER" ]; then
		echo -n "Enter the remote server name (FQDN): "
		read REMOTE_SERVER
	fi;
	if [ -z "$REMOTE_USER" ]; then
		echo -n "Enter the account to use at the server: "
		read REMOTE_USER
	fi;
	set -u

	create_srvscript "/tmp/${SRV_SCRIPT}" "$TS"
	local_key_copy "$REMOTE_USER" "$REMOTE_SERVER" "$TS"

	echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
	echo "Transfering serverside script (you will need to enter password)"
	echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
	echo; echo
	scp "/tmp/${SRV_SCRIPT}" "${REMOTE_USER}@${REMOTE_SERVER}:/tmp/${SRV_SCRIPT}"
	echo; echo

	#Done with it, remove local copy
	rm "/tmp/${SRV_SCRIPT}"
	echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
	echo "Running serverside script (you will need to enter password)"
	echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
	ssh "${REMOTE_USER}@${REMOTE_SERVER}" "/tmp/${SRV_SCRIPT}"
	echo; echo
	echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
	echo "Key-pair binding with ${REMOTE_USER}@${REMOTE_SERVER} is done"
	echo "You should now be able to log in without a password"
	echo "If not, consider the workaround at this link:"
	echo " https://bugs.launchpad.net/ubuntu/+source/openssh/+bug/201786"
	echo "~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~ ~-~"
}

if [ "$SSH_KEYPAIR_SH" == $( basename $0 ) ]; then
	#The script is not sourced. I.e. it's actually supposed do something"
	ssh_keypair $@
fi

fi
